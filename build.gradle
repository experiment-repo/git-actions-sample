group = 'example'
version = '1.0'

buildscript {
    repositories {
        gradlePluginPortal()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:latest.release'
    }
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    mavenLocal()
     mavenCentral()
}


dependencies {

    // Spring Boot starter web - MVC, support for embedded container
    api "org.springframework.boot:spring-boot-starter-web:latest.release"

    // Test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
   
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

// Java version
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        java {
            // Destination directory for Mapstruct generated classes
            srcDirs('build/generated/sources/annotationProcessor/java/main')
        }
    }
    test {
        java {
            srcDirs('src/test/java')
            srcDirs('src/test/resouces')
        }
    }
}

test {
    useJUnit()
    useJUnitPlatform()
    systemProperty'spring.profiles.active', 'junit'
    // failFast = true
    forkEvery = 1
    jvmArgs '-ea'
}

// Eclipse gradle
eclipse {
    classpath {
        containers 'org.springsource.ide.eclipse.gradle.classpathcontainer'
    }
}

def getMavenSettingsLocalRepository = {
    String localRepository
    String m2Home = System.getenv("M2_HOME");
    if (m2Home != null) {
        m2Home += "/conf"
    } else {
        m2Home = System.getProperty( "user.home" ) + "/.m2"
    }
    File mavenSettings = new File(m2Home ?: userHome, "settings.xml")
    if (mavenSettings.exists()) {
        def xmlSlurper = new XmlSlurper()
        def output = xmlSlurper.parse(mavenSettings)
        localRepository = output.localRepository
    }
    return localRepository ?: System.getProperty( "user.home" ) + "/.m2/repository"
}

def executionEnv = (project.hasProperty('EXECUTION_ENV') == true) ? project.property("EXECUTION_ENV") : "local";
// maven repository
publishing {
   publications {
      javaLibrary(MavenPublication) {
         version = executionEnv == "local" ? version : executionEnv+".release"
         from project.components.java
      }
   }
   repositories {
      maven {
        name = "GitHubPackages"
        if (executionEnv!="local") {
        url = project.findProperty("github_packages_registry_url")
        credentials {
           username = System.getenv("GITHUB_ACTOR")
           password = System.getenv("GITHUB_TOKEN")
        }
        }
        else{
        def localRepository = getMavenSettingsLocalRepository()
                url = "file:${localRepository}"
        }
      }
   }
}


publish.dependsOn build